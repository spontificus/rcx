#configuration for internal values, you do not need to change any of them to start
#with, but resolution and eye_distance are two things you probably want to tweak.
#
#when it come to performance, try lowering stepsize and graphics_threshold (if you
#get just a few warnings about them, then you have around "optimal" performance)


#
#global stuff
#

#ammount of text in output:
# 0 - only error and warning messages
# 1 - errors and warnings, and basic describption of what is being done
# 2 - same as above, but each action is described more verbose (good for debugging)
verbosity 1

#enable multithreading? will make graphics, physics and event handling loops run in
#sepparate threads (gives heavy performance increase on multicore processors, but
#will probably give worse performance on singlecore processors)
multithread true

#tweaks to improve multithreading experience
limit_fps true #only render one frame for each simulation
events_sleep 5 #how many ms to sleep after each event processing

#
#physics
#
stepsize 0.01 #100Hz
iterations 20
contact_points 20

#tricky thing: to ensure good accuracy, rescale all values to get mass and
#lengths around 1 to 0.1 (since rollcage vehicles are way larger)
scale 0.1 #not supported yet!
#in order to prevent wheels from spinning too fast (when in air), which causes
#axis bending problems, wheels rotating faster than this doesn't get any torque
max_wheel_rotation 20


#Determine if part of wheel is tyre or rim
# = cos(v), where v is the angle between wheel axis and collision vector (0 is against side of wheel)
#
#example:	1 (v=0): all angles of wheel (except _exactly_ 0) considdered to be tyre
#		0 (v=90): all angles of wheel (except _exactly_ 90) considdered to be rim
#		0.7071 (v~=45): angles between 135 and 45 (-45 and +45 from ground and wheel face normal) are tyre, all outside are rim
rim_angle 0.6

#default values (when objects forget to specify)
default_mu 1.0 #no friction
default_erp 0.8 #good default collision force
default_cfm 0.01 #sligthly soft surface (increases stability)
default_slip 0.01 #how much wheels will slip sideway
default_linear_drag 5 #how quickly linear movement will decrease
default_angular_drag 5 #how quickly angular rotation will decrease

#disable bodies that have been standing still for a certain time
#(eats less performance)
auto_disable_linear 0.05 #linear velocity threshold for considering inactive
auto_disable_angular 0.10 #angular velocity threshold
#do not set time lower than stepsize!
auto_disable_time 0.5 #how long time of inactivity before disabling (0=ignore)
auto_disable_steps 1 #ammounts of steps before inactive body gets disabled (0=ignore)



#
#graphics
#
graphics_threshold 10 #estimate how long (in ms) it should take to render a scene (not used when multithreading)
resolution 1200 800
fullscreen false #(if you use fullscreen, set resolution to your display's native)

#calculate viewing-angle based on eye distance (in pixels)
eye_distance 2086

#the following does only matter if you force the viewing angle
force_angle false
view_angle 60

